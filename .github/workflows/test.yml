name: RISC-V Assembly Instruction Translate and Decoding

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      FAILED_TESTS: 0

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install GCC
        run: sudo apt-get install -y gcc

      - name: Compile C File
        run: gcc main.c -o main

      - name: Input wrong file name
        run: echo -e "some_file.s\nterminate" | ./main
        continue-on-error: true

      - name: Run Compiled Program
        run: echo -e "test1.s\ntest2.s\ntest3.s\ntestcase1.s\ntestcase2.s\ntestcase3.s\ntestcase4.s\ntestcase5.s\ntestcase6.s\ntestcase7.s\ntestcase8-1.s\ntestcase8-2.s\ntestcase8-3.s\nterminate" | ./main

      - name: Run All Tests
        run: |
          # 함수 정의와 실행을 같은 step에서 수행
          check_test() {
            local test_name=$1
            local failed=0
            
            echo "Checking ${test_name}..."
            
            # .o 파일 검사
            if ! diff -q ${test_name}.o ${test_name}_ans.o > /dev/null 2>&1; then
              echo "❌ ${test_name}.o fail"
              diff ${test_name}.o ${test_name}_ans.o || true
              failed=1
            else
              echo "✅ ${test_name}.o success"
            fi
            
            # .trace 파일 검사
            if ! diff -q ${test_name}.trace ${test_name}_ans.trace > /dev/null 2>&1; then
              echo "❌ ${test_name}.trace fail"
              diff ${test_name}.trace ${test_name}_ans.trace || true
              failed=1
            else
              echo "✅ ${test_name}.trace success"
            fi
            
            if [ $failed -eq 1 ]; then
              FAILED_TESTS=$((FAILED_TESTS + 1))
            fi
            
            return $failed
          }

          # 기존 테스트 케이스 실행
          echo "=== Running Original Test Cases ==="
          for test in test{1..3}; do
            check_test $test
          done

          # 새로운 테스트 케이스 실행
          echo "=== Running New Test Cases ==="
          for test in testcase{1..7}; do
            check_test $test
          done

          # 추가 테스트 케이스 실행
          echo "=== Running Additional Test Cases ==="
          for test in testcase8-{1..3}; do
            check_test $test
          done

          # 결과 요약
          echo "=== Test Results Summary ==="
          echo "Total failed tests: $FAILED_TESTS"
          echo "=========================="
          
          if [ $FAILED_TESTS -gt 0 ]; then
            echo "⚠️ Warning: $FAILED_TESTS test(s) failed"
          else
            echo "✅ All tests passed successfully!"
          fi
          
          # GitHub Actions output으로 결과 저장
          echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT